resources:
  ref:
    # ensembl species name
    species: homo_sapiens
    # ensembl release version
    release: "112"
    # genome build
    build: GRCh38
    # pfam release to use for annotation of domains in differential splicing analysis
    pfam: "33.0"
    # Choose strategy for selecting representative transcripts for each gene.
    # Possible values:
    #   - canonical (use the canonical transcript from ensembl, only works for human at the moment)
    #   - mostsignificant (use the most significant transcript)
    #   - path/to/any/file.txt (a path to a file with ensembl transcript IDs to use;
    #     the user has to ensure that there is only one ID per gene given)
    representative_transcripts: canonical
  ontology:
    # gene ontology to download, used e.g. in goatools
    gene_ontology: "http://current.geneontology.org/ontology/go-basic.obo"


enrichment:
  goatools:
    # tool is only run if set to `true`
    activate: false
    fdr_genes: 0.05
    fdr_go_terms: 0.05
    # All important paths (without file formats)
    pathvars:
      input_file: "path/to/table/{sample}/effects_{gene_fdr}" # Must be a tsv including columns qval, ens_gene and ext_gene
      output_file: "save/goatools-result-tables/{sample}/here_{gene_fdr}"
      plot_file: "save/goatools-result-plots/{{sample}}/here_{ns}_{{gene_fdr}}" # Must contain ns as wildcard and all other wildcards in double curved brackets
      datavzrd_file: "save/datavzrd-tables/{sample}/here_{gene_fdr}"
      log_file_name: "{sample}" # Must contain all wildcards from the other files
      # Declare all wildcards used in the paths. You can use python expressions which will be evaluated
      wildcards:
        sample: '["sample1", "sample2"]'
        gene_fdr: "str(config['enrichment']['goatools']['fdr_genes']).replace('.', '-')"
        ns: '["BP", "CC", "MF"]' # Always use this
  fgsea:
    # tool is only run if set to `true`
    activate: false
    # if activated, you need to provide a GMT file with gene sets of interest
    gene_sets_file: "resources/gene_sets/dummy.gmt"
    fdr_gene_set: 0.05
    # minimum achievable p-value  (equivalent to the reciprocal of the number of permutations, see fgsea docs)
    eps: 1.0e-50
    # All important paths (without file formats)
    pathvars:
      input_file: "path/to/table/{sample}/with/effects" # Must be a tsv including columns qval, pval, mean_obs, target_id, ens_gene, ext_gene
      output_file: "save/goatools-result-tables/{sample}/here"
      plot_file: "save/goatools-result-plots/{sample}/here"
      log_file_name: "{sample}" # Must contain all wildcards from the other files
      # Declare all used wildcards. You can use python expressions which will be evaluated
      wildcards:
        sample: '["sample1", "sample2"]'
  # Name of the column in the input files
  effect_col:
    # If name of column depends on wildcards set dynamic to true and give the python expression to compute it. Else give the name in static_value.  
    dynamic: true
    dynamic_expression: "f\"b_{config[wc.model][\"primary_variable\"]}\""
    static_value: ""

meta_comparisons:
  # comparison is only run if set to `true`
  activate: false
  # Define here the comparisons under interest
  comparisons:
    # Define any name for comparison. You can add as many comparisions as you want
    model_X_vs_model_Y:
      items:
        # Define the two underlying models for the comparison. The models must be defined in the diffexp/models in the config
        # items must be of form <arbitrary label>: <existing diffexp model from config> 
        - X: model_X
        - Y: model_Y
      # Define label for datavzrd report
      label: model X vs. model Y